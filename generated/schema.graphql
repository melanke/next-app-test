### This file was generated by Nexus Schema
### Do not make changes to this file directly


type BatchPayload {
  count: Int
}

type GrupoDoPrincipal {
  idGrupoDoPrincipalPk: Int
  titulo: String
}

input GrupoDoPrincipalWhereUniqueInput {
  idGrupoDoPrincipalPk: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

type Mutation {
  bigRedButton: String
  createOneUser(data: UserCreateInput!): User
  deleteManyUser(where: UserWhereInput): BatchPayload
  deleteOneUser(where: UserWhereUniqueInput!): User
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

type Principal {
  grupoDoPrincipal: GrupoDoPrincipal
  idPrincipalPk: Int
  titulo: String
}

input PrincipalWhereUniqueInput {
  idPrincipalPk: Int
}

type Query {
  allUsers(email: String): [User]
  grupoDoPrincipals(after: GrupoDoPrincipalWhereUniqueInput, before: GrupoDoPrincipalWhereUniqueInput, first: Int, last: Int): [GrupoDoPrincipal!]!
  principals(after: PrincipalWhereUniqueInput, before: PrincipalWhereUniqueInput, first: Int, last: Int): [Principal!]!
  user(where: UserWhereUniqueInput!): User
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

type User {
  email: String
  idUserPk: Int
}

input UserCreateInput {
  email: String!
}

input UserUpdateInput {
  email: StringFieldUpdateOperationsInput
}

input UserUpdateManyMutationInput {
  email: StringFieldUpdateOperationsInput
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  email: StringFilter
  idUserPk: IntFilter
}

input UserWhereUniqueInput {
  idUserPk: Int
}
